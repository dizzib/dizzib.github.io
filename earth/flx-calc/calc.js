// Generated by LiveScript 1.4.0
(function(){
  window.calc = function(it){
    var EARTHRADIUS, G, KGPERGRAM, METRESPERMM, MICRONSPERMM, MMPERMETRE, MMPERMICRON, NUH2O, PI, SECSPERMIN, r, a, vol_s, rho_l, d_T, r_T, a_T, l, dlRatio, vol_sT, rho_lT, vMs, re, c_d, dd, nu, youngMod, unitVol, unitB, unitW, unitAProj, unitD, factor, sag_v, sag, sagMm, x_C, dh, dhMm, uy, uDY, sigma_o, sigma_u, sigma_upc, alert;
    EARTHRADIUS = 6371 * 1000;
    G = 9.81;
    KGPERGRAM = 0.001;
    METRESPERMM = 0.001;
    MICRONSPERMM = 1000;
    MMPERMETRE = 1000;
    MMPERMICRON = 0.001;
    NUH2O = 1.081 * Math.pow(10, -6);
    PI = 3.14159265;
    SECSPERMIN = 60;
    if (it.d < 10) {
      it.d *= MICRONSPERMM;
    }
    r = METRESPERMM * MMPERMICRON * it.d / 2;
    a = PI * Math.pow(r, 2);
    vol_s = a * it.l_s;
    rho_l = KGPERGRAM * it.m_s / vol_s;
    if (it.nb) {
      it.rho_w = rho_l;
    }
    if (it.d_T < 10) {
      it.d_T *= MICRONSPERMM;
    }
    d_T = METRESPERMM * MMPERMICRON * it.d_T;
    r_T = d_T / 2;
    a_T = PI * Math.pow(r_T, 2);
    l = it.x + it.l_o;
    dlRatio = it.dl / l;
    vol_sT = a_T * it.l_s * (1 + dlRatio);
    rho_lT = KGPERGRAM * it.m_s / vol_sT;
    vMs = it.v * METRESPERMM / SECSPERMIN;
    re = Math.abs(vMs) * d_T / NUH2O;
    c_d = 8 * PI / (re * (2.002 - Math.log(re)));
    dd = it.d_T - it.d;
    nu = -dd / (it.d * dlRatio);
    youngMod = it.T_max / (a * dlRatio);
    unitVol = a_T * 1;
    unitB = it.rho_w * unitVol * G;
    unitW = rho_lT * unitVol * G;
    unitAProj = d_T * 1;
    unitD = c_d ? it.rho_w * Math.pow(vMs, 2) * c_d * unitAProj / 2 : 0;
    if (vMs < 0) {
      unitD = -unitD;
    }
    factor = Math.pow(it.x, 2) / (8 * it.T_max);
    sag_v = unitD * factor;
    sag = (unitW + unitD - unitB) * factor;
    sagMm = sag * MMPERMETRE;
    x_C = it.x / 2;
    dh = Math.sqrt(Math.pow(x_C, 2) + Math.pow(EARTHRADIUS, 2)) - EARTHRADIUS;
    dhMm = dh * MMPERMETRE;
    uy = it.uy;
    uDY = uy + uy + (uy + uy + uy + uy) / 2;
    sigma_o = dhMm * 0.5 / 3;
    sigma_u = uDY / 3;
    sigma_upc = 100 * sigma_u / sigma_o;
    alert = {
      nu: nu < 0.3 || nu > 0.5,
      re: re > 1,
      rho_l: rho_l < 960 || rho_l > 1600,
      rho_lT: rho_lT < 960 || rho_lT > 1600,
      sigma_upc: sigma_upc >= 100
    };
    return {
      c_d: {
        val: c_d,
        alert: alert.re
      },
      d: it.d,
      d_T: it.d_T,
      dd: dd,
      dl_percent: dlRatio * 100,
      dh: dhMm,
      dY_concave: -dhMm + sagMm,
      dY_convex: +dhMm + sagMm,
      dY_flat: 0 + sagMm,
      E: youngMod / Math.pow(10, 9),
      nu: {
        val: nu,
        alert: alert.nu
      },
      r: r * MMPERMETRE,
      re: {
        val: re,
        alert: alert.re
      },
      rho_l: {
        val: rho_l,
        alert: alert.rho_l
      },
      rho_lT: {
        val: rho_lT,
        alert: alert.rho_lT
      },
      rho_w: it.rho_w,
      sag: sagMm,
      sag_v: {
        val: sag_v * MMPERMETRE,
        alert: alert.re
      },
      sigma_o: sigma_o,
      sigma_u: sigma_u,
      sigma_upc: {
        val: Math.round(sigma_upc),
        alert: alert.sigma_upc
      }
    };
  };
}).call(this);
