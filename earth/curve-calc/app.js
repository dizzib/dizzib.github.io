// Generated by LiveScript 1.5.0
(function(){
  var FEETPERMETRE, MILESPERKM, EARTHRADIUSKM, UNITS, unitId;
  window.log = function(){
    return console.log.apply(console, arguments);
  };
  FEETPERMETRE = 3.2808;
  MILESPERKM = 0.621371192237;
  EARTHRADIUSKM = 6371;
  UNITS = {
    imperial: {
      minor: {
        name: 'feet',
        factor: 1 / FEETPERMETRE,
        'switch': FEETPERMETRE
      },
      major: {
        name: 'miles',
        factor: 1 / MILESPERKM,
        'switch': MILESPERKM
      }
    },
    metric: {
      minor: {
        name: 'metres',
        factor: 1,
        'switch': 1 / FEETPERMETRE
      },
      major: {
        name: 'km',
        factor: 1,
        'switch': 1 / MILESPERKM
      }
    }
  };
  initialise();
  calculate();
  $('input').on('keypress', function(it){
    if ((it.key || it.keyIdentifier) === 'Enter') {
      return calculate();
    }
  });
  $('#btnCalculate').on('click', calculate);
  $('#metric,#imperial').on('click', function(it){
    return switchUnit(it.target.value);
  });
  $('form').on('submit', function(it){
    return it.preventDefault();
  });
  function calculate(){
    var h0, d0, unit, h0_km, d0_km, d1_km, h1_m, d1, h1, qs;
    h0 = getVal('h0');
    d0 = getVal('d0');
    unit = UNITS[unitId];
    h0_km = h0 * unit.minor.factor * 0.001;
    d0_km = d0 * unit.major.factor;
    d1_km = getHorizonDistance_km(h0_km);
    h1_m = getTargetHiddenHeight_km(d0_km - d1_km) * 1000;
    d1 = d1_km / unit.major.factor;
    h1 = h1_m / unit.minor.factor;
    $('#d1').text(d1.toFixed(6));
    $('#h1').text(h1.toFixed(4));
    qs = queryString.stringify({
      d0: d0,
      h0: h0,
      unit: unitId
    });
    return history.replaceState(void 8, "", "?" + qs);
  }
  function getHorizonDistance_km(h0_km){
    return Math.sqrt(Math.pow(h0_km, 2) + 2 * EARTHRADIUSKM * h0_km);
  }
  function getTargetHiddenHeight_km(d2_km){
    if (d2_km < 0) {
      return 0;
    }
    return Math.sqrt(Math.pow(d2_km, 2) + Math.pow(EARTHRADIUSKM, 2)) - EARTHRADIUSKM;
  }
  function getVal(it){
    return parseFloat($("#" + it).val());
  }
  function initialise(){
    var qs, d0, h0, u;
    qs = queryString.parse(location.search);
    $('#d0').val(parseFloat(d0 = qs.d0) ? d0 : '30');
    $('#h0').val(parseFloat(h0 = qs.h0) ? h0 : '10');
    return initialiseUnit(UNITS[u = qs.unit] ? u : 'imperial');
  }
  function initialiseUnit(it){
    $("input#" + it).prop('checked', true);
    return showUnit(unitId = it);
  }
  function showUnit(it){
    $('.unit-minor .unit').text(UNITS[it].minor.name);
    return $('.unit-major .unit').text(UNITS[it].major.name);
  }
  function switchUnit(it){
    var unit;
    showUnit(unitId = it);
    unit = UNITS[unitId];
    $('#h0').val(unit.minor['switch'] * getVal('h0'));
    $('#d0').val(unit.major['switch'] * getVal('d0'));
    return calculate();
  }
}).call(this);
